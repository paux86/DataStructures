/** * A class that implements the ADT set by using a ResizableArrayBag. * * @author Matt Brierley * @version 2/2/19 */public class ArraySetWithResizableArrayBag<T extends Comparable<? super T>> implements SetInterface<T>{    private ResizableArrayBag<T> setOfEntries;    /**     * First constructor; takes no parameters, and initializes setOfEntries with default capacity (3)     */    public ArraySetWithResizableArrayBag()    {        //TODO Project1 - done        this.setOfEntries = new ResizableArrayBag<>();    } // end default constructor    /**     * Second constructor; initializes setOfEntries with capacity parameter     * @param capacity     */    public ArraySetWithResizableArrayBag(int capacity)    {        //TODO Project1 - done        this.setOfEntries = new ResizableArrayBag<>(capacity);    } // end of secondary constructor    /**     * Third constructor; takes an array of contents, initializes setOfEntries with default capacity (3)     * Adds each element of contents to setOfEntries, ignoring null elements (handled by add)     * @param contents     */    public ArraySetWithResizableArrayBag(T[] contents)    {        //TODO Project1 - done        this();        for(T item : contents)        {            add(item);        }    }    public void clear()    {        this.setOfEntries.clear();    } // end clear    /**     * Checks if setOfEntries already contains newEntry, if it does not, newEntry is added to setOfEntries     * If newEntry is successfully added to setOfEntries, this returns true, else returns false.     * Ignores null entries     * @param newEntry The object to be added as a new entry.     * @return     */    public boolean add(T newEntry)    {        //TODO Project1 - done        boolean success = false;        if(newEntry != null && !this.setOfEntries.contains(newEntry))        {            this.setOfEntries.add(newEntry);            success = true;        }        return success;    } // end add    /**     * Calls removeElement from ResizableArrayBag, which returns true if successful, and false if not successful     * @param anEntry The entry to be removed.     * @return     */    public boolean removeElement(T anEntry)    {        //TODO Project1 - done        return this.setOfEntries.removeElement(anEntry);    } // end remove    /**     * Calls ResizableArrayBag remove() method and returns result, which will be the removed entry if successful     * or null if unsuccessful     * @return     */    public T remove()    {        //TODO Project1 - done        return this.setOfEntries.remove();    } // end remove    /**     * Calls ResizableArrayBag contains() method and returns result     * @param anEntry The entry to locate.     * @return     */    public boolean contains(T anEntry)    {        //TODO Project1 - done        return this.setOfEntries.contains(anEntry);    } // end contains    public int getCurrentSize()    {        //TODO Project1 - done        return this.setOfEntries.getCurrentSize();    } // end getCurrentSize    public boolean isEmpty()    {        //TODO Project1 - done        return this.setOfEntries.isEmpty();    } // end getLength    public T[] toArray()    {        //TODO Project1 - done        return this.setOfEntries.toArray();    } // end toArray    // Displays a set.    // If the set is empty displays a message that the set is empty    // if the set is not empty displays the number of elements and the content of the set    public void displaySet()    {        //TODO Project1 - done        if(!isEmpty())        {            T[] setArray = toArray();            System.out.printf("The set contains %d element(s): ", setArray.length);            for (int index = 0; index < setArray.length; index++)            {                System.out.print(setArray[index] + " ");            }        }        else        {            System.out.print("The set is empty");        }        System.out.println();    } // end displaySet    public static void main(String[] args)    {        String[] inputData = {"A", "B", "C", "D", "A", "C", "B", "B"};        System.out.println("--> Creating aSet with the secondary constructor - capacity of " + inputData.length);        SetInterface<String> aSet = new ArraySetWithResizableArrayBag<>(inputData.length);        System.out.println("--> Adding elements from inputData to aSet");        for (int i = 0; i < inputData.length; i++)            aSet.add(inputData[i]);        aSet.displaySet();        System.out.println("\n--> Clearing aSet");        aSet.clear();        aSet.displaySet();        System.out.println("--> aSet isEmpty returns \n" + aSet.isEmpty());        System.out.println("--> The number of elements in aSet is \n" + aSet.getCurrentSize());        System.out.println("\n--> Creating set1 with default constructor");        SetInterface<String> set1 = new ArraySetWithResizableArrayBag<>();        // Initial capacity is 3        System.out.println("--> set1 initially empty");        set1.displaySet();        System.out.println("\n--> Adding elements to set1");        set1.add("A");        set1.add("A");        set1.add("B");        set1.add("A");        set1.add("C");        set1.add("A");        System.out.println("--> set1 after adding elements");        set1.displaySet();        System.out.println("\n--> Adding elements to set1");        set1.add("V");        set1.add("V");        set1.add("T");        set1.add("U");        set1.add("V");        set1.add("W");        set1.add("X");        set1.add("Y");        set1.add("Z");        System.out.println("\n--> set1 after adding more elements");        set1.displaySet();        System.out.println("\n--> set1 contains \"A\":\n" + set1.contains("A"));        System.out.println("--> set1 contains \"E\":\n" + set1.contains("E"));        System.out.println("\n--> Removing \"B\" from set1");        set1.removeElement("B");        System.out.println("--> After removing \"B\" from set1:");        set1.displaySet();        System.out.println("--> Removing random element from set1");        System.out.println("--> After removing \"" + set1.remove()                + "\" from set1:");        set1.displaySet();        System.out.println("\n--> Trying to remove \"Q\" from set1");        set1.removeElement("Q");        System.out.println("--> After trying to remove non-existent element \"Q\" from set1:");        set1.displaySet();        System.out.println("\n--> Adding 4 elements to set1");        set1.add("K");        set1.add("L");        set1.add("M");        set1.add("N");        System.out.println("--> After adding 4 elements to set1:");        set1.displaySet();        System.out.println("--> Adding 1 element to set1");        set1.add("O");        System.out.println("--> After adding 1 more element to set1:");        set1.displaySet();        System.out.println("\n--> Creating set2 with the secondary constructor that takes an array as input");        SetInterface<String> set2 = new ArraySetWithResizableArrayBag<>(inputData);        set2.displaySet();        System.out.println("--> Adding more elements to set2");        set2.add("A");        set2.add("B");        set2.add("B");        set2.add("A");        set2.add("C");        set2.add("C");        set2.add("D");        set2.add("E");        set2.add("F");        set2.add("G");        set2.add("H");        System.out.println("--> set2 after adding:");        set2.displaySet();        System.out.println("\nTrying to add null entry");        String nullEntry = null;        set2.add(nullEntry);        System.out.println("--> set2 after adding:");        set2.displaySet();    }} // end ArraySetWithResizableArrayBag