import java.util.Arrays;/** * A class that implements the ADT set by using a chain of linked nodes. * The set is never full. * * @author Matt Brierley * @version 2/7/2019 */public class LinkedSetWithChainOfNodes<T extends Comparable<? super T>> implements SetInterface<T>{    private Node<T> firstNode;            // Head reference to first node    public LinkedSetWithChainOfNodes()    {        //TODO Project2 - done        this.firstNode = null;    } // end default constructor    public void clear()    {        //TODO Project2 - done        while(!isEmpty())        {            remove();        }    } // end clear    public boolean add(T newEntry)    {        //TODO Project2 - done        boolean success;        if(newEntry != null && !this.contains(newEntry))        {            // add to beginning of chain:            Node<T> newNode = new Node<>(newEntry);            newNode.next = this.firstNode;            this.firstNode = newNode;            success = true;        }        else        {            success = false;        }        return success;    } // end add    /**     * Locates a given entry within this bag.     * Returns a reference to the node containing the entry, if located,     * or null otherwise.     *     * Utilized by removeElement method     */    private Node<T> getReferenceTo(T anEntry)    {        //TODO Project2 - done        boolean found = false;        Node<T> currentNode = this.firstNode;        while (!found && (currentNode != null))        {            if (anEntry.equals(currentNode.data))                found = true;            else                currentNode = currentNode.next;        } // end while        return currentNode;    } // end getReferenceTo    /**     * Gets reference of anEntry, if entry is found (non-null) assigns data of entry to data of firstnode,     * then sets firstNode to firstNode.next, removing firstNode from the chain     * @param anEntry The entry to be removed.     * @return true if anEntry is successfully removed     */    public boolean removeElement(T anEntry)    {        //TODO Project2 - done        boolean result = false;        Node<T> nodeN = getReferenceTo(anEntry);        if (nodeN != null)        {            nodeN.data = this.firstNode.data;            this.firstNode = this.firstNode.next;            result = true;        }        return result;    } // end remove    /**     * if possible, sets firstNode to firstNode.next     * @return data of removed firstNode     */    public T remove()    {        //TODO Project2 - done        T result = null;        if(this.firstNode != null)        {            result = this.firstNode.data;            this.firstNode = this.firstNode.next;        }        return result;    } // end remove    /**     * Returns true if getReferenceTo(anEntry) method returns non-null     * @param anEntry The entry to locate.     * @return     */    public boolean contains(T anEntry)    {        //TODO Project2 - done        return getReferenceTo(anEntry) != null;    } // end contains    public boolean isEmpty()    {        //TODO Project2 - done        return this.firstNode == null;    } // end getLength    public T[] toArray()    {        //TODO Project2 - done        //first loop to get number of nodes to create array of appropriate size        int counter = 0;        Node<T> currentNode = this.firstNode;        while (currentNode != null)        {            counter++;            currentNode = currentNode.next;        } // end while        // the cast is safe because the new array contains null entries        @SuppressWarnings("unchecked")        T[] result = (T[]) new Comparable<?>[counter]; // unchecked cast        //second loop to add the data of each node to the array        int index = 0;        currentNode = this.firstNode;        while (currentNode != null && index < result.length)        {            result[index] = currentNode.data;            index++;            currentNode = currentNode.next;        } // end while        return result;    } // end toArray    // Displays a set.    public void displaySet()    {        //TODO Project2 - done, two loops feels bad, but need to get the number of nodes before displaying node data in        //order to replicate sample run output        int counter = 0;        if (this.firstNode != null)        {            Node<T> currentNode = this.firstNode;            while (currentNode != null)            {                currentNode = currentNode.next;                counter++;            }            System.out.print("The set contains " + counter + " element(s), as follows.");            System.out.println();            currentNode = this.firstNode;            while (currentNode != null)            {                System.out.print(currentNode.data + " ");                currentNode = currentNode.next;            }            System.out.println();        }        else            System.out.println("The bag is empty.");    } // end displaySet    // A class of nodes for a chain of linked nodes.    private class Node<S>    {        private S data; // Data portion        private Node next; // Link to next node        private Node(S dataPortion)        {            this(dataPortion, null);        } // end constructor        private Node(S dataPortion, Node nextNode)        {            this.data = dataPortion;            this.next = nextNode;        } // end constructor    } // end Node    public static void main(String[] args)    {        String[] inputData = {"A", "B", "C", "D", "A", "C", "B", "B"};        System.out.println("--> Creating aSet and adding to it elements from inputData: " + Arrays.toString(inputData));        SetInterface<String> aSet = new LinkedSetWithChainOfNodes<>();        for (int i=0; i < inputData.length; i++)        {            aSet.add(inputData[i]);        }        aSet.displaySet();        System.out.println("\n--> Clearing aSet");        aSet.clear();        aSet.displaySet();        System.out.println("--> aSet isEmpty returns: " + aSet.isEmpty());        System.out.println("\n--> Creating set1 and set2");        SetInterface<String> set1 = new LinkedSetWithChainOfNodes<>();        SetInterface<String> set2 = new LinkedSetWithChainOfNodes<>();        System.out.println("\n--> Adding elements to set1");        set1.add("A");        set1.add("A");        set1.add("B");        set1.add("A");        set1.add("C");        set1.add("A");        System.out.println("--> set1 after adding elements");        set1.displaySet();        System.out.println("\n--> Adding elements to set2");        set2.add("A");        set2.add("B");        set2.add("B");        set2.add("A");        set2.add("C");        set2.add("C");        set2.add("D");        System.out.println("--> set2 after adding elements");        set2.displaySet();        System.out.println("\n--> set1 contains \"A\": " + set1.contains("A"));        System.out.println("--> set1 contains \"E\": " + set1.contains("E"));        System.out.println("\n--> Removing \"B\" from set1");        set1.removeElement("B");        System.out.println("--> After removing \"B\" from set1, ");        set1.displaySet();        System.out.println("\n--> Removing random element from set1");        String removed = set1.remove();        System.out.println("--> set1.remove() returned: \"" + removed + "\"");        set1.displaySet();        System.out.println("\n--> Removing \"A\" from set1");        set1.removeElement("A");        System.out.println("--> After removing \"A\" from set1, ");        set1.displaySet();        System.out.println("\n--> Removing random element from set1");        removed = set1.remove();        System.out.println("--> set1.remove() returned: \"" + removed + "\"");        set1.displaySet();        System.out.println("\n--> Adding 4 elements to set1");        set1.add("K");        set1.add("L");        set1.add("M");        set1.add("N");        System.out.println("--> After adding 4 elements to set1:");        set1.displaySet();        System.out.println("\n--> Trying to add duplicate element \"N\" to set1");        set1.add("N");        System.out.println("--> After adding a duplicate element \"N\" to set1");        set1.displaySet();        System.out.println("\nTrying to add null entry");        String nullEntry = null;        set1.add(nullEntry);        System.out.println("--> set1 after adding:");        set1.displaySet();    } // end main} // end LinkedSetWithChainOfNodes